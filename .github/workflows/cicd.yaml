name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  backend-tests:
    name: Tests Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 
      
    - name: Configuration JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Cache des dépendances Maven
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Exécution des tests backend avec couverture
      run: |
        cd back
        mvn clean verify jacoco:report
        
    - name: Upload des rapports backend
      uses: actions/upload-artifact@v3
      with:
        name: backend-reports
        path: |
          back/target/site/jacoco/
          back/target/surefire-reports/
          back/target/classes/
        retention-days: 1

  frontend-tests:
    name: Tests Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 
      
    - name: Configuration Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: front/package-lock.json
        
    - name: Installation des dépendances frontend
      run: |
        cd front
        npm ci
        
    - name: Exécution des tests frontend avec couverture
      run: |
        cd front
        npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
        
    - name: Upload des rapports frontend
      uses: actions/upload-artifact@v3
      with:
        name: frontend-reports
        path: front/coverage/
        retention-days: 1

  sonarqube:
    name: SonarQube
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download des rapports backend
        uses: actions/download-artifact@v3
        with:
          name: backend-reports
          path: back/target/
          
      - name: Download des rapports frontend
        uses: actions/download-artifact@v3
        with:
          name: frontend-reports
          path: front/coverage/
          
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
  validation:
    name: Validation PR
    needs: [backend-tests, frontend-tests, sonarqube]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Validation réussie
      run: |
        echo "Tous les tests et l'analyse qualité sont passés! La PR peut être mergée."